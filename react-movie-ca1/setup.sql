-- https://supabase.com/docs/guides/auth/managing-user-data

create table
  public.profiles (
    id uuid not null,
    name text null,
    avatar_url text null,
    constraint profiles_pkey primary key (id),
    constraint profiles_id_fkey foreign key (id) references auth.users (id) on delete cascade
  ) tablespace pg_default;

alter table public.profiles enable row level security;

create policy "Enable read access for all users"
on "public"."profiles"
to public
using (
    true
);

-- inserts a row into public.profiles
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profiles (id, name, avatar_url)
  values (new.id, new.raw_user_meta_data ->> 'name', new.raw_user_meta_data ->> 'avatar_url');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- reviews table
create table
  public.reviews (
    id bigint generated by default as identity not null,
    "movieId" bigint not null,
    author uuid not null,
    rating bigint not null,
    review text not null,
    constraint reviews_pkey primary key (id),
    constraint reviews_author_fkey1 foreign key (author) references profiles (id) on update cascade on delete cascade
  ) tablespace pg_default;

alter table public.reviews enable row level security;

create policy "Enable read access for authenticated users"
on "public"."reviews"
as PERMISSIVE
for SELECT
to authenticated
using (
    true
);

create policy "Enable insert for users based on user_id"
on "public"."reviews"
as PERMISSIVE
for INSERT
to public
with check (
    auth.uid() = author
);
